/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/XCrYaapQXIs
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Arimo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

arimo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { SetStateAction, JSX, SVGProps, useState } from "react"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Select, SelectTrigger, SelectContent, SelectItem } from "@/components/ui/select"

export function upload_csv() {
  const [file, setFile] = useState(null)
  const [headers, setHeaders] = useState([])
  const [nameHeader, setNameHeader] = useState(null)
  const [emailHeader, setEmailHeader] = useState(null)
  const [headShotHeader, setHeadShotHeader] = useState(null)
  const handleFileChange = (e: any) => {
    const selectedFile = e.target.files[0]
    if (selectedFile && selectedFile.type === "text/csv") {
      setFile(selectedFile)
      parseHeaders(selectedFile)
    } else {
      setFile(null)
      setHeaders([])
      setNameHeader(null)
      setEmailHeader(null)
      setHeadShotHeader(null)
    }
  }
  const parseHeaders = (csvFile: Blob) => {
    const reader = new FileReader()
    reader.onload = (e) => {
      const data = e.target?.result
      const lines = data?.split("\n")
      if (lines.length > 0) {
        const headers = lines[0].split(",").map((header: string) => {
          if (header.startsWith('"') && header.endsWith('"')) {
            return header.slice(1, -1)
          }
          return header
        })
        setHeaders(headers)
      }
    }
    reader.readAsText(csvFile)
  }
  const handleHeaderSelect = (header: string | SetStateAction<null>, type: string) => {
    switch (type) {
      case "name":
        setNameHeader(header)
        break
      case "email":
        setEmailHeader(header)
        break
      case "headshot":
        setHeadShotHeader(header)
        break
      default:
        break
    }
  }
  return (
    <div className="flex flex-col items-center justify-center h-screen bg-background">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Upload CSV File</CardTitle>
          <CardDescription>Drag and drop a CSV file or click to select a file.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-center w-full border-2 border-dashed border-muted rounded-md py-6 px-4 cursor-pointer">
            <label htmlFor="file-input" className="cursor-pointer">
              {file ? (
                <div className="text-muted-foreground">
                  {file.name} - {file.size} bytes
                </div>
              ) : (
                <div className="text-muted-foreground">
                  <UploadIcon className="h-6 w-6 mr-2" />
                  Drop file here or click to upload
                </div>
              )}
            </label>
            <input id="file-input" type="file" accept=".csv" className="hidden" onChange={handleFileChange} />
          </div>
        </CardContent>
        {headers.length > 0 && (
          <CardFooter>
            <div className="grid gap-4">
              <div className="grid grid-cols-3 gap-2">
                <div className="font-semibold">Name Header</div>
                <Select value={nameHeader} onValueChange={(header) => handleHeaderSelect(header, "name")}>
                  <SelectTrigger className="w-full">{nameHeader || "Select Name Header"}</SelectTrigger>
                  <SelectContent>
                    {headers.map((header, index) => (
                      <SelectItem
                        key={index}
                        value={header.startsWith('"') && header.endsWith('"') ? header.slice(1, -1) : header}
                      >
                        {header.startsWith('"') && header.endsWith('"') ? header.slice(1, -1) : header}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-3 gap-2">
                <div className="font-semibold">Email Header</div>
                <Select value={emailHeader} onValueChange={(header) => handleHeaderSelect(header, "email")}>
                  <SelectTrigger className="w-full">{emailHeader || "Select Email Header"}</SelectTrigger>
                  <SelectContent>
                    {headers.map((header, index) => (
                      <SelectItem
                        key={index}
                        value={header.startsWith('"') && header.endsWith('"') ? header.slice(1, -1) : header}
                      >
                        {header.startsWith('"') && header.endsWith('"') ? header.slice(1, -1) : header}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-3 gap-2">
                <div className="font-semibold">Headshot URL Header</div>
                <Select value={headShotHeader} onValueChange={(header) => handleHeaderSelect(header, "headshot")}>
                  <SelectTrigger className="w-full">{headShotHeader || "Select Headshot URL Header"}</SelectTrigger>
                  <SelectContent>
                    {headers.map((header, index) => (
                      <SelectItem
                        key={index}
                        value={header.startsWith('"') && header.endsWith('"') ? header.slice(1, -1) : header}
                      >
                        {header.startsWith('"') && header.endsWith('"') ? header.slice(1, -1) : header}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardFooter>
        )}
      </Card>
    </div>
  )
}
